/**
 *
 * Filename: envswap.cpp
 * Author: James A. Muldrow
 * Date: 30 December 2019
 *
 * Purpose: This program will 
 * be used to swap environment files 
 * when using the laravel or lumen frameworks
 *
 **/
// Include files
#include <iostream>
#include <cstring>
#include <string>
#include <filesystem>
#include <locale>
// Namespace to use
using namespace std;

const int MAX_AUTH_PARAMETER_SIZE = 2; // Curently authorized number of parameters
const char * authorizedParameterList[MAX_AUTH_PARAMETER_SIZE] = {
    "--h",
    "-e"
};

/**
 * Print helpful information
 * @return string
 **/
string printHelp(bool extended = false){
    string helpString = "";
    if (extended == false){
        helpString = "\n\t\t\t  Environment Swap Tool 1.0\n" \
                     "\t\t\t\tDeveloped by\n\t\t\t      James A. Muldrow\n\t\t\t     www.codespace.blog\n" \
                        "\nPurpose: This program is used to swap environment files when using the laravel or lumen frameworks.\n" \
                        "\nUsage: envswap --h\n" \
                        "Usage: envswap -e [environment]\n" \
                        "Usage: envswap -e [environment] [optional flag: \"--ignore_questions\"]\n\n" \
                        "\nExample: envswap -e local\n" \
                        "Example: envswap -e local --ignore_questions\n\n";
    } else {
        helpString = "\n\t\t\t  Environment Swap Tool 1.0\n" \
                     "\t\t\t\tDeveloped by\n\t\t\t      James A. Muldrow\n\t\t\t     www.codespace.blog\n" \
                     "\nPurpose: This program is used to swap environment files when using the laravel or lumen frameworks.\n" \
                        "\nUsage: envswap --h\n" \
                        "Usage: envswap -e [environment]\n" \
                        "Usage: envswap -e [environment] [optional flag: \"--ignore_questions\"]\n\n" \
                        "\nExample: envswap -e local\n" \
                        "Example: envswap -e local --ignore_questions\n\n"
                        "\nThis program requires that you have a file named .env.[dev name] in the " \
                        "local directory\n" \
                        "[dev name] can be local, remote, staging, etc; " \
                        "This program will overwrite the .env file with data from the specified env file." \
                        "\nDo NOT write directly to the .env file. Write to .env.local, .env.remote, and" \
                        "\nthen run this program in order to switch dev environments.\n\n";
    }
    return helpString;
}
/**
 * Swap Environment file based on command line argument
 * @return int
 **/
int swapEnvFile(char * env, string answer=""){
    char prefix[] = "./.env"; 
    string fileName = string(prefix) + "." + env;
    if(filesystem::exists(fileName)){
        string input;
        cout << "\n\t\t\t  Environment Swap Tool 1.0\n" \
                "\t\t\t\tDeveloped by\n\t\t\t      James A. Muldrow\n\t\t\t     www.codespace.blog\n";
        cout << "\nYou are about to overwrite the .env file with data from: " << fileName;
        cout << "\nAre you sure you want to proceed (yes or no): ";
        if (answer == "yes"){
            input = answer;
            cout << "Yes - (Autmatic answer generated by --ignore_questions flag)\n";
        } else {
            cin >> input;
        }
        if (input == string("yes") || input == "YES"){
            filesystem::copy_file(fileName, "./.env", filesystem::copy_options::overwrite_existing);
            cout << "\nEnvironment swap complete. You are now using the: \"" << 
            env << "\" environment variables. Goodbye.\n\n";
        } else if (input == string("no") || input == "NO") {
            cout << "\nOk, no changes were made. Goodbye!\n\n";
        } else {
            cout << "Invalid entry. Goodbye.";
        }
    }else{
        cerr << "\nError: " << fileName << " does not exist!\n";
        cout << printHelp() << endl;
    }
    return 0;
}


/**
 * Checks that parameters ar valid based on authorizedParameterList and local requirements
 * @return bool
 **/
bool isParameterAuthorized(char * parameter,const char * authorizedParameterList[], int argc, char * argv[]){
    bool paramAuthorized = false;
    if (argc > 1){
        for (int i = 0; i < MAX_AUTH_PARAMETER_SIZE; i++){
            if (strcmp(authorizedParameterList[i], parameter) == 0) {
                paramAuthorized = true;
            } else if (strcmp(argv[1], "-e") == 0 && argc < 4) {
                paramAuthorized = true;
            } else if (argc > 3 && argc < 5){
                if (strcmp(argv[1],"-e") == 0 && strcmp(argv[3], "--ignore_questions") == 0){
                    paramAuthorized = true;
                }
            }
        }
        if (paramAuthorized){
            if ((strcmp(parameter, "--h" ) == 0) && argc > 2){
                paramAuthorized = false;
            } 
        } else {
            paramAuthorized = false;
        }
    }
    return paramAuthorized;
}

/**
 * Main entry point for the program
 * @return int
 **/
int main(int argc, char * argv[]){
    
    bool parametersAreGood = false;
    
    for (int i = 1; i < argc; i++){
        parametersAreGood = isParameterAuthorized(argv[i], authorizedParameterList, argc, argv);
    }

    if (parametersAreGood){
        if (strcmp(argv[1], "--h") == 0){
            cout << printHelp(true);
        } else if (strcmp(argv[1], "-e") == 0 && argc > 2){
            // Environment swap goes here
            if (strcmp(argv[1], "-e") == 0 && argc > 3 && strcmp(argv[3], "--ignore_questions") == 0){
                string answer = "yes";
                swapEnvFile(argv[2], answer);
            } else {
                swapEnvFile(argv[2]);
            }
        } else {
            cout << printHelp();
        }
    } else {
        cout << printHelp();
    }
    return 0;
}